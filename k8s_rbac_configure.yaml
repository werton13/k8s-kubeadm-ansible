---
# create tenant admin user certificate
- import_playbook: ./k8s_rbac_prepare_certs.yaml

# create tenant admin kubeconfig files
- import_playbook: ./k8s_rbac_prepare_kubeconfigs.yaml

- hosts: masters[0]
  gather_facts: true
  become: yes
  vars_files:
    - ./vars/base_vars.yaml
  tasks:
    # create a dedicated namespace for a Tenant
    - name: create a namespace for a K8s tenant
      kubernetes.core.k8s:
        kubeconfig: "/etc/kubernetes/admin.conf"
        name: "{{ tenant_ns_default }}"  #Need to prepare Variable for this
        api_version: v1
        kind: Namespace
        state: present
    - name: create folder for K8s RBAC manifests
      file:
        path: "/home/{{ os_admin_username }}/k8s_addons/rbac"
        state: directory
        mode: '0644'

- hosts: workers 
  become: yes
  gather_facts: yes
  tasks:
    - name: gather facts from workers to get their hostnames and put them into K8s clustrrole elements # if possible need to filter this
      setup:
    
    # create manifests for two ClusterRoles
    - name: create K8s ClusterRole's manifests from templates
      template: 
        src: "./templates/{{ item }}.j2"
        dest: "/home/{{ os_admin_username }}/k8s_addons/rbac/{{ item }}"
        mode: '0644'
      loop:
        - k8s_tenant_ro_clusterrole.yaml # ClusterRole with ability to view cluster-objects
        - k8s_tenant_node_drain_clusterrole.yaml # ClusterRole with ability to perform cordon/uncordon worker nodes
      delegate_to: "{{ groups.masters[0] }}"

- hosts: masters[0]
  gather_facts: true
  become: yes
  vars_files:
    - ./vars/base_vars.yaml
  tasks:         
    - name: create K8s ClusterRoleBinding's and RoleBindings manifests from templates 
      template: 
        src: "./templates/{{ item }}.j2"
        dest: "/home/{{ os_admin_username }}/k8s_addons/rbac/{{ item }}"
        mode: '0644'
      loop:
        - k8s_tenant_clusterrole_binding.yaml # bind custom  ClusterRole to tenantadmin user on the cluster level
        - k8s_tenant_role_binding.yaml        # bind default Admin ClusterRole to tenantadmin user on the Tenant namespace level

    - name: apply K8s roles manifests for a tenant
      kubernetes.core.k8s:
        kubeconfig: "/etc/kubernetes/admin.conf"
        state: present
        src: "{{ item }}"
      loop:
        - "/home/{{ os_admin_username }}/k8s_addons/rbac/k8s_tenant_ro_clusterrole.yaml"
        - "/home/{{ os_admin_username }}/k8s_addons/rbac/k8s_tenant_node_drain_clusterrole.yaml"
    
    - name: apply ClusterRoleBinding's and RoleBindings manifests
      kubernetes.core.k8s:
        kubeconfig: "/etc/kubernetes/admin.conf"
        state: present
        src: "{{ item }}"
      loop:
        - "/home/{{ os_admin_username }}/k8s_addons/rbac/k8s_tenant_clusterrole_binding.yaml"
        - "/home/{{ os_admin_username }}/k8s_addons/rbac/k8s_tenant_role_binding.yaml"
     

  


    
  



